{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../collection.service\";\nimport * as i2 from \"@angular/common\";\nfunction StatsComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"number\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const pack_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", pack_r1, \" Pack:\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(4, 2, ctx_r0.packageProbabilities[pack_r1], \"1.2-2\"), \"% chance of finding a new card \");\n  }\n}\nexport class StatsComponent {\n  constructor(collectionService) {\n    this.collectionService = collectionService;\n    this.packageProbabilities = {};\n    this.bestPackage = {\n      name: '',\n      probability: 0\n    };\n  }\n  ngOnInit() {\n    this.calculateProbabilities();\n  }\n  calculateProbabilities() {\n    this.collectionService.getCollection().subscribe(data => {\n      const totalCardsInPack = {};\n      const ownedCardsInPack = {};\n      data.forEach(card => {\n        if (!totalCardsInPack[card.Pack]) {\n          totalCardsInPack[card.Pack] = 0;\n          ownedCardsInPack[card.Pack] = 0;\n        }\n        totalCardsInPack[card.Pack]++;\n        if (card.Owned) {\n          ownedCardsInPack[card.Pack]++;\n        }\n      });\n      Object.keys(totalCardsInPack).forEach(pack => {\n        this.packageProbabilities[pack] = (totalCardsInPack[pack] - ownedCardsInPack[pack]) / totalCardsInPack[pack] * 100;\n      });\n      // Determine the best package to open\n      this.bestPackage = Object.entries(this.packageProbabilities).reduce((best, [pack, prob]) => {\n        return prob > best.probability ? {\n          name: pack,\n          probability: prob\n        } : best;\n      }, {\n        name: '',\n        probability: 0\n      });\n    });\n  }\n  static {\n    this.ɵfac = function StatsComponent_Factory(t) {\n      return new (t || StatsComponent)(i0.ɵɵdirectiveInject(i1.CollectionService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: StatsComponent,\n      selectors: [[\"app-stats\"]],\n      decls: 11,\n      vars: 6,\n      consts: [[4, \"ngFor\", \"ngForOf\"]],\n      template: function StatsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\");\n          i0.ɵɵtext(1, \"Package Probabilities\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"ul\");\n          i0.ɵɵtemplate(3, StatsComponent_li_3_Template, 5, 5, \"li\", 0);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"h3\");\n          i0.ɵɵtext(5, \"Best Package to Open for New Cards\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"p\")(7, \"strong\");\n          i0.ɵɵtext(8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(9);\n          i0.ɵɵpipe(10, \"number\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.objectKeys(ctx.packageProbabilities));\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\"\", ctx.bestPackage.name, \" Pack\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\" with a \", i0.ɵɵpipeBind2(10, 3, ctx.bestPackage.probability, \"1.2-2\"), \"% chance of finding a new card\\n\");\n        }\n      },\n      dependencies: [i2.NgForOf, i2.DecimalPipe],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;IAEEA,0BAA0D;IAChDA,YAAgB;IAAAA,iBAAS;IAACA,YACpC;;IAAAA,iBAAK;;;;;IADKA,eAAgB;IAAhBA,4CAAgB;IAAUA,eACpC;IADoCA,kIACpC;;;ACKF,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,iBAAoC;IAApC,sBAAiB,GAAjBA,iBAAiB;IAHrC,yBAAoB,GAA8B,EAAE;IACpD,gBAAW,GAA0C;MAAEC,IAAI,EAAE,EAAE;MAAEC,WAAW,EAAE;IAAC,CAAE;EAEtB;EAE3DC,QAAQ;IACN,IAAI,CAACC,sBAAsB,EAAE;EAC/B;EAEAA,sBAAsB;IACpB,IAAI,CAACJ,iBAAiB,CAACK,aAAa,EAAE,CAACC,SAAS,CAAEC,IAAW,IAAI;MAC/D,MAAMC,gBAAgB,GAA8B,EAAE;MACtD,MAAMC,gBAAgB,GAA8B,EAAE;MAEtDF,IAAI,CAACG,OAAO,CAACC,IAAI,IAAG;QAClB,IAAI,CAACH,gBAAgB,CAACG,IAAI,CAACC,IAAI,CAAC,EAAE;UAChCJ,gBAAgB,CAACG,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC;UAC/BH,gBAAgB,CAACE,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC;;QAEjCJ,gBAAgB,CAACG,IAAI,CAACC,IAAI,CAAC,EAAE;QAC7B,IAAID,IAAI,CAACE,KAAK,EAAE;UACdJ,gBAAgB,CAACE,IAAI,CAACC,IAAI,CAAC,EAAE;;MAEjC,CAAC,CAAC;MAEFE,MAAM,CAACC,IAAI,CAACP,gBAAgB,CAAC,CAACE,OAAO,CAACM,IAAI,IAAG;QAC3C,IAAI,CAACC,oBAAoB,CAACD,IAAI,CAAC,GAAI,CAACR,gBAAgB,CAACQ,IAAI,CAAC,GAAGP,gBAAgB,CAACO,IAAI,CAAC,IAAIR,gBAAgB,CAACQ,IAAI,CAAC,GAAI,GAAG;MACtH,CAAC,CAAC;MAEF;MACA,IAAI,CAACE,WAAW,GAAGJ,MAAM,CAACK,OAAO,CAAC,IAAI,CAACF,oBAAoB,CAAC,CAACG,MAAM,CAAC,CAACC,IAAI,EAAE,CAACL,IAAI,EAAEM,IAAI,CAAC,KAAI;QACzF,OAAOA,IAAI,GAAGD,IAAI,CAACnB,WAAW,GAAG;UAAED,IAAI,EAAEe,IAAI;UAAEd,WAAW,EAAEoB;QAAI,CAAE,GAAGD,IAAI;MAC3E,CAAC,EAAE;QAAEpB,IAAI,EAAE,EAAE;QAAEC,WAAW,EAAE;MAAC,CAAE,CAAC;IAClC,CAAC,CAAC;EACJ;;;uBAnCWJ,cAAc;IAAA;EAAA;;;YAAdA,cAAc;MAAAyB;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UDT3B9B,0BAAI;UAAAA,qCAAqB;UAAAA,iBAAK;UAC9BA,0BAAI;UACFA,6DAEK;UACPA,iBAAK;UAELA,0BAAI;UAAAA,kDAAkC;UAAAA,iBAAK;UAC3CA,yBAAG;UACOA,YAA2B;UAAAA,iBAAS;UAACA,YAC/C;;UAAAA,iBAAI;;;UARmBA,eAAmC;UAAnCA,kEAAmC;UAOhDA,eAA2B;UAA3BA,wDAA2B;UAAUA,eAC/C;UAD+CA,kIAC/C","names":["i0","StatsComponent","constructor","collectionService","name","probability","ngOnInit","calculateProbabilities","getCollection","subscribe","data","totalCardsInPack","ownedCardsInPack","forEach","card","Pack","Owned","Object","keys","pack","packageProbabilities","bestPackage","entries","reduce","best","prob","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\gc042\\OneDrive\\Desktop\\Projects\\TCGPocketStats2\\pokemon-collection-frontend\\src\\app\\stats\\stats.component.html","C:\\Users\\gc042\\OneDrive\\Desktop\\Projects\\TCGPocketStats2\\pokemon-collection-frontend\\src\\app\\stats\\stats.component.ts"],"sourcesContent":["<h2>Package Probabilities</h2>\n<ul>\n  <li *ngFor=\"let pack of objectKeys(packageProbabilities)\">\n    <strong>{{ pack }} Pack:</strong> {{ packageProbabilities[pack] | number: '1.2-2' }}% chance of finding a new card\n  </li>\n</ul>\n\n<h3>Best Package to Open for New Cards</h3>\n<p>\n  <strong>{{ bestPackage.name }} Pack</strong> with a {{ bestPackage.probability | number: '1.2-2' }}% chance of finding a new card\n</p>\n","// src/app/stats/stats.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { CollectionService } from '../collection.service';\n\n@Component({\n  selector: 'app-stats',\n  templateUrl: './stats.component.html',\n  styleUrls: ['./stats.component.css']\n})\nexport class StatsComponent implements OnInit {\n  packageProbabilities: { [key: string]: number } = {};\n  bestPackage: { name: string; probability: number } = { name: '', probability: 0 };\n\n  constructor(private collectionService: CollectionService) {}\n\n  ngOnInit(): void {\n    this.calculateProbabilities();\n  }\n\n  calculateProbabilities(): void {\n    this.collectionService.getCollection().subscribe((data: any[]) => {\n      const totalCardsInPack: { [key: string]: number } = {};\n      const ownedCardsInPack: { [key: string]: number } = {};\n\n      data.forEach(card => {\n        if (!totalCardsInPack[card.Pack]) {\n          totalCardsInPack[card.Pack] = 0;\n          ownedCardsInPack[card.Pack] = 0;\n        }\n        totalCardsInPack[card.Pack]++;\n        if (card.Owned) {\n          ownedCardsInPack[card.Pack]++;\n        }\n      });\n\n      Object.keys(totalCardsInPack).forEach(pack => {\n        this.packageProbabilities[pack] = ((totalCardsInPack[pack] - ownedCardsInPack[pack]) / totalCardsInPack[pack]) * 100;\n      });\n\n      // Determine the best package to open\n      this.bestPackage = Object.entries(this.packageProbabilities).reduce((best, [pack, prob]) => {\n        return prob > best.probability ? { name: pack, probability: prob } : best;\n      }, { name: '', probability: 0 });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}